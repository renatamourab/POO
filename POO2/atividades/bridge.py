# -*- coding: utf-8 -*-
"""bridge

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VisoH19OFoq8Q8Eh3aJ1wQRTstTUp3bt
"""

from abc import ABC, abstractmethod

class FilaA(ABC):
    @abstractmethod
    def adicionar(self, item):
        pass

    def remover(self):
        pass

    def esta_vazia(self):
        pass

class FilaLista(FilaA):
    def __init__(self):
        self.fila = []

    def adicionar(self, item):
        self.fila.append(item)

    def remover(self):
        if self.Ver_fila():
            raise IndexError("vazia")
        return self.fila.pop(0)     #remove o primeiro

    def Ver_fila(self):
        return len(self.fila) == 0

class Fila:
    def __init__(self, implementacao):
        self.implementacao = implementacao

    def enfileirar(self, item): #adicionar
        self.implementacao.adicionar(item)

    def desenfileirar(self): #remover
        return self.implementacao.remover()

    def Ver_fila(self): #ve se tem algo na fila
        return self.implementacao.Ver_fila()

    def imprimir_fila(self):
      print("Fila: ")
      if self.Ver_fila():
          print("vazia")
      else:
          for item in (self.implementacao.fila):
              print(item)

#teste
fila = Fila(FilaLista()) #chamada da clase fila

fila.enfileirar(1)
fila.enfileirar(7)
fila.enfileirar(9)
fila.enfileirar(4)
fila.enfileirar(0)

print("Item removido:", fila.desenfileirar())
print("Item removido:", fila.desenfileirar())
fila.imprimir_fila()